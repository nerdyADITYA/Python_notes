Q:1
Write a program that prompts for a file name, then opens
that file and reads through the file, looking for lines of the
form:
X-DSPAM-Confidence: 0.8475
Count these lines and extract the floating point values from each of the lines and compute
the average of those values and produce an output as shown below. Do not use the sum()
function or a variable named sum in your solution. You can download the sample data at
http://www.py4e.com/code3/mbox-short.txt when you are testing below enter mbox-short.txt as
the file name.

Enter file name: mbox-short.txt
output:
Average spam confidence: 0.7507185185185187

Q:2
Open the file mbox-short.txt and read it line by line. When
you find a line that starts with ‘From’ like the following line:
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008 You will parse the From line using
split() and print out the second word in the line (i.e. the entire address of the person who sent the
message). Then print out a count at the end. 
Hint: make sure not to include the lines that start
with ‘From:’. Also look at the last line of the sample output to see how to print the count.

output:
stephen.marquard@uct.ac.za
louis@media.berkeley.edu
zqian@umich.edu
rjlowe@iupui.edu
zqian@umich.edu
rjlowe@iupui.edu
cwen@iupui.edu
cwen@iupui.edu
gsilver@umich.edu
gsilver@umich.edu
zqian@umich.edu
gsilver@umich.edu
wagnermr@iupui.edu
zqian@umich.edu
antranig@caret.cam.ac.uk
gopal.ramasammycook@gmail.com
david.horwitz@uct.ac.za
david.horwitz@uct.ac.za
david.horwitz@uct.ac.za
david.horwitz@uct.ac.za
stephen.marquard@uct.ac.za
louis@media.berkeley.edu
louis@media.berkeley.edu
ray@media.berkeley.edu
cwen@iupui.edu
cwen@iupui.edu
cwen@iupui.edu
There were 27 lines in the file with From as the first word

Q:3 Write a program to read through the mbox-short.txt and
figure out who has sent the greatest number of mail messages.
The program looks for ‘From’ lines and takes the second word
of those lines as the person who sent the mail. The program
creates a Python dictionary that maps the sender’s mail address
to a count of the number of times they appear in the file.
After the dictionary is produced, the program reads through
the dictionary using a maximum loop to find the most prolific
committer.
output:

cwen@iupui.edu 5

Q:4 Write a program to read through the mbox-short.txt and
figure out the distribution by hour of the day for each of the
messages. You can pull the hour out from the ‘From’ line
by finding the time and then splitting the string a second
time using a colon.From stephen.marquard@uct.ac.za Sat Jan
5 09:14:16 2008Once you have accumulated the counts for each
hour, print out the counts, sorted by hour as shown below.

output:
Enter file:mbox-short.txt
04 3
06 1
07 1
09 2
10 3
11 6
14 1
15 2
16 4
17 2
18 1
19 1


